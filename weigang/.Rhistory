# load libraries
library(tidyverse) # load a package into memory
library(readxl) # load another package
x <- read_tsv("http://diverge.hunter.cuny.edu/~weigang/bio203.txt"
x <- read_tsv("http://diverge.hunter.cuny.edu/~weigang/bio203.txt")
x <- read_tsv("http://diverge.hunter.cuny.edu/~weigang/bio203.txt")
x
bio203.long <- x %>% pivot_longer(2:4, names_to = "Genotype", values_to = "Count")
bio203.long
data("iris")
glimpse(iris)
iris %>% ggplot(aes(x = Species, y = Sepal.Length )) +
geom_boxplot() +
theme_bw() +
coord_flip()
theme_bw() +
coord_flip()
iris %>% ggplot(aes(x = Species, y = Sepal.Length )) +
geom_boxplot() +
geom_point(shape = 1) +
theme_bw() +
coord_flip()
iris %>% ggplot(aes(x = Species, y = Sepal.Length )) +
geom_boxplot() +
geom_jitter(shape = 1) +
theme_bw() +
coord_flip()
iris %>% ggplot(aes(x = Species, y = Sepal.Length )) +
geom_boxplot() +
geom_jitter(shape = 1, width = 0.2) +
theme_bw() +
coord_flip()
# scatter plot to compare sepal length versus sepal width, which suggest significant correlation that can be tested with linear regression
iris %>% ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(shape = 1) +
geom_smooth(method = "lm") +
facet_wrap(~Species) +
theme_bw()
q()
library(drc)
citation(drc)
citation("drc")
version("drc")
session.info()
sessions.info()
sessionInfo()
q()
install.packages("gplots")
install.packages("umap")
install.packages(c("broom", "conflicted", "dbplyr", "dplyr", "dtplyr", "forcats", "ggplot2", "googlesheets4", "haven", "hms", "httr", "jsonlite", "lubridate", "magrittr", "modelr", "pillar", "purrr", "ragg", "readr", "readxl", "reprex", "vest", "stringr", "tibble", "tidyr"))
install.packages(c("broom", "conflicted", "dbplyr", "dplyr", "dtplyr", "forcats", "ggplot2", "googlesheets4", "haven", "hms", "httr", "jsonlite", "lubridate", "magrittr", "modelr", "pillar", "purrr", "ragg", "readr", "readxl", "reprex", "vest", "stringr", "tibble", "tidyr"))
install.packages(c("broom", "conflicted", "dbplyr", "dplyr", "dtplyr", "forcats", "ggplot2", "googlesheets4", "haven", "hms", "httr", "jsonlite", "lubridate", "magrittr", "modelr", "pillar", "purrr", "ragg", "readr", "readxl", "reprex", "vest", "stringr", "tibble", "tidyr"))
# elite selection
x1 <- read_tsv("test-alg1.tsv", col_names = F)
library(tidyverse)
setwd("../../Dropbox/cono-models/weigang/")
# elite selection
x1 <- read_tsv("test-alg1.tsv", col_names = F)
colnames(x1) <- c("tag", "tsize", "fit", "bin_str", "fit_elite", "fit_avg", "asize", "alg")
x1 <- x1 %>%
mutate(bin_str = paste("target", bin_str))
x1 %>%
ggplot(aes(x=asize, y=fit_avg)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(shape=1) +
facet_wrap(~bin_str) +
geom_vline(aes(xintercept = tsize ), linetype = 2) +
theme_bw() +
xlab("size of automata (number of states in an automata)") +
ylab("average fitness (at g=100)") +
labs(title = "Simulated origin of sociality with automata", subtitle = "Test 1. Adaptation to a predefined target binary string, with elite (top 10) selection", caption = "N=40 automata, g=100, mut=1/3")
x1
x1 <- x1 %>%
mutate(label = paste("target", sprintf("%02d", tsize)))
x1
x1 %>%
ggplot(aes(x=asize, y=fit_avg)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(shape=1) +
facet_wrap(~label) +
geom_vline(aes(xintercept = tsize ), linetype = 2) +
theme_bw() +
xlab("size of automata (number of states in an automata)") +
ylab("average fitness (at g=100)") +
labs(title = "Simulated origin of sociality with automata", subtitle = "Test 1. Adaptation to a predefined target binary string, with elite (top 10) selection", caption = "N=40 automata, g=100, mut=1/3")
x2 <- x2 %>%
mutate(label = paste("target", sprintf("%02d", tsize)))
# tournment selection
x2 <- read_tsv("test-alg2.tsv", col_names = F)
colnames(x2) <- c("tag", "tsize", "fit", "bin_str", "fit_elite", "fit_avg", "asize", "alg")
x2 <- x2 %>%
mutate(label = paste("target", sprintf("%02d", tsize)))
x2 %>%
ggplot(aes(x=asize, y=fit_avg)) +
geom_jitter(shape=1) +
facet_wrap(~panel) +
geom_vline(aes(xintercept = tsize ), linetype = 2) +
theme_bw() +
xlab("size of automata (number of states in an automata)") +
ylab("average fitness (at g=100)") +
labs(title = "Simulated origin of sociality with automata", subtitle = "Test 1. Adaptation to a predefined target binary string, with tournament selection", caption = "N=40 automata, g=100, mut=1/3")
x2 %>%
ggplot(aes(x=asize, y=fit_avg)) +
geom_jitter(shape=1) +
facet_wrap(~label) +
geom_vline(aes(xintercept = tsize ), linetype = 2) +
theme_bw() +
xlab("size of automata (number of states in an automata)") +
ylab("average fitness (at g=100)") +
labs(title = "Simulated origin of sociality with automata", subtitle = "Test 1. Adaptation to a predefined target binary string, with tournament selection", caption = "N=40 automata, g=100, mut=1/3")
x1 %>%
ggplot(aes(x=asize, y=fit_avg)) +
#geom_boxplot(outlier.shape = NA) +
geom_jitter(shape=1) +
facet_wrap(~label) +
#  geom_vline(aes(xintercept = tsize ), linetype = 2) +
theme_bw() +
xlab("size of automata (number of states in an automata)") +
ylab("average fitness (at g=100)") +
labs(title = "Simulated origin of sociality with automata", subtitle = "Test 1. Adaptation to a predefined target binary string, with elite (top 10) selection", caption = "N=40 automata, g=100, mut=1/3")
x2 %>%
ggplot(aes(x=asize, y=fit_avg)) +
geom_jitter(shape=1) +
facet_wrap(~label) +
#  geom_vline(aes(xintercept = tsize ), linetype = 2) +
theme_bw() +
xlab("size of automata (number of states in an automata)") +
ylab("average fitness (at g=100)") +
labs(title = "Simulated origin of sociality with automata", subtitle = "Test 1. Adaptation to a predefined target binary string, with tournament selection", caption = "N=40 automata, g=100, mut=1/3")
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg))
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, color = as.color(asize))) +
geom_point(shape = 1)
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, color = as.factor(asize))) +
geom_point(shape = 1)
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, color = as.factor(asize))) +
geom_point(shape = 1) +
geom_line()
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, color = as.factor(asize))) +
geom_point(shape = 1) +
geom_line() +
theme_bw()
?geom_errorbar
geom_line() +
theme_bw()
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = as.factor(asize))) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw()
x2 %>%
group_by(tsize, asize) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit)) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
facet_wrap(~as.factor(asize))
x <- bind_rows(x1, x2)
x
x %>%
group_by(tsize, asize, alg) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=tsize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = as.factor(alg))) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
facet_wrap(~as.factor(asize))
x %>%
group_by(tsize, asize, alg) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=asize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = as.factor(alg))) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
facet_wrap(~as.factor(tsize))
x %>%
group_by(tsize, asize, alg) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=asize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = as.factor(alg))) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
geom_hline(yintercept = 1, linetype = 2) +
facet_wrap(~as.factor(tsize))
x
x %>%
group_by(tsize, asize, alg) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
ggplot(aes(x=asize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = as.factor(alg))) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
geom_hline(yintercept = 1, linetype = 2) +
facet_wrap(~label)
x
x %>%
group_by(tsize, asize, alg) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
mutate(label = paste("target", sprintf("%02d", tsize))) %>%
ggplot(aes(x=asize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = as.factor(alg))) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
geom_hline(yintercept = 1, linetype = 2) +
facet_wrap(~label)
x %>%
group_by(tsize, asize, alg) %>%
summarise(mean.fit = mean(fit_avg), sd.fit = sd(fit_avg)) %>%
mutate(label = paste("target", sprintf("%02d", tsize))) %>%
mutate(alg2 = if_else(alg == 1, 'elite', 'tournament')) %>%
ggplot(aes(x=asize, y=mean.fit, ymin = mean.fit - sd.fit, ymax = mean.fit + sd.fit, color = alg2)) +
geom_point(shape = 1) +
geom_errorbar() +
geom_line() +
theme_bw() +
geom_hline(yintercept = 1, linetype = 2) +
facet_wrap(~label) +
theme(legend.position = "bottom")
